<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ch4 指令系统</title>
    <url>/2023/11/17/%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h1><ul>
<li><strong>指令&#x2F;机器指令</strong>定义：指计算机执行某种操作的命令，是计算机运行最小功能单位。</li>
<li>所有指令的集合构成该机的指令系统叫<strong>指令集</strong>。不同计算机指令集一般不同，不兼容。</li>
<li>一条指令就是机器语言的一个语句。有意义的二进制代码。</li>
<li>指令字长与机器字长没有固定关系，可以相同，可以不同</li>
</ul>
<h2 id="4-1-指令格式"><a href="#4-1-指令格式" class="headerlink" title="4.1 指令格式"></a>4.1 指令格式</h2><p>基本是根据操作码的长度、功能分类</p>
<h3 id="4-1-1-基本格式"><a href="#4-1-1-基本格式" class="headerlink" title="4.1.1  基本格式"></a>4.1.1  基本格式</h3><p><img src="https://raw.githubusercontent.com/drinkwateronly/Image-Host/main/image/clip_image002.jpg" alt="img"></p>
<p>根据地址码数目不同、分为以下格式</p>
<p><img src="https://raw.githubusercontent.com/drinkwateronly/Image-Host/main/image/image-20231102123621389.png" alt="image-20231102123621389"></p>
<h3 id="4-1-2-定长操作码指令格式"><a href="#4-1-2-定长操作码指令格式" class="headerlink" title="4.1.2  定长操作码指令格式"></a>4.1.2  定长操作码指令格式</h3><p>高位部分分配固定n位表示操作码，那么操作系统最多有2^n条指令，简化硬件设计，提高指令译码速度。机器字长为32位及以上时的常规用法。</p>
<h3 id="4-1-3-拓展操作码指令格式"><a href="#4-1-3-拓展操作码指令格式" class="headerlink" title="4.1.3 拓展操作码指令格式"></a>4.1.3 拓展操作码指令格式</h3><p>有限指令字长时，为了保持比较丰富的指令种类，使得操作码不定长。增加译码和控制的复杂度。</p>
<ul>
<li>不允许短操作码是长操作码前缀，操作码不能重复。</li>
<li>且一般使用频率高的操作码设计为短操作码，使用频率低分配长操作码。减少指令译码分析时间</li>
</ul>
<p><img src="https://raw.githubusercontent.com/drinkwateronly/Image-Host/main/image/image-20231102124310112.png" alt="image-20231102124310112"></p>
<blockquote>
<p>例题</p>
<p><img src="https://raw.githubusercontent.com/drinkwateronly/Image-Host/main/image/image-20231102125310339.png" alt="image-20231102125310339"></p>
</blockquote>
<h3 id="4-1-4-指令类型"><a href="#4-1-4-指令类型" class="headerlink" title="4.1.4 指令类型"></a>4.1.4 指令类型</h3><p><img src="https://raw.githubusercontent.com/drinkwateronly/Image-Host/main/image/image-20231102125005456.png" alt="image-20231102125005456"></p>
<h2 id="4-2指令的寻址方式"><a href="#4-2指令的寻址方式" class="headerlink" title="4.2指令的寻址方式"></a>4.2指令的寻址方式</h2><p>确定本条指令的数据地址（数据寻址）以及下一条待执行指令的地址（指令寻址）。</p>
<h3 id="4-2-1-指令寻址"><a href="#4-2-1-指令寻址" class="headerlink" title="4.2.1 指令寻址"></a>4.2.1 指令寻址</h3><h4 id="1、顺序寻址"><a href="#1、顺序寻址" class="headerlink" title="1、顺序寻址"></a>1、顺序寻址</h4><p>程序计数器PC+1自动形成下一条指令的地址。</p>
<h4 id="2、跳跃寻址"><a href="#2、跳跃寻址" class="headerlink" title="2、跳跃寻址"></a>2、跳跃寻址</h4><p>通过转移类的指令，如JMP，由本条指令指出下一条指令的地址（绝对地址和相对地址）。跳跃的结果修改PC。所以下一条指令地址仍然由PC给出。</p>
<h3 id="4-2-2-数据寻址（10种）"><a href="#4-2-2-数据寻址（10种）" class="headerlink" title="4.2.2 数据寻址（10种）"></a>4.2.2 数据寻址（10种）</h3><p><img src="https://raw.githubusercontent.com/drinkwateronly/Image-Host/main/image/image-20231103102028653.png" alt="image-20231103102028653"></p>
<p><img src="https://raw.githubusercontent.com/drinkwateronly/Image-Host/main/image/image-20231103102156837.png" alt="image-20231103102156837"></p>
<h4 id="1、隐含寻址"><a href="#1、隐含寻址" class="headerlink" title="1、隐含寻址"></a>1、隐含寻址</h4><p><img src="https://raw.githubusercontent.com/drinkwateronly/Image-Host/main/image/image-20231103092204441.png" alt="image-20231103092204441"></p>
<p>不给出操作数地址，而是根据操作码知道，</p>
<ul>
<li>有利于缩短指令字长</li>
<li>增加存储操作数或隐含地址的硬件。</li>
</ul>
<p>如ADD指令，该指令只给出了第一操作数的地址A，而隐含了累加器ACC的地址作为第二操作数地址。</p>
<h4 id="2、立即（数）寻址"><a href="#2、立即（数）寻址" class="headerlink" title="2、立即（数）寻址"></a>2、立即（数）寻址</h4><p><img src="https://raw.githubusercontent.com/drinkwateronly/Image-Host/main/image/image-20231103092555957.png" alt="image-20231103092555957"></p>
<p>指令字的地址字段不是操作数地址，而是操作数本身，采用补码表示。</p>
<ul>
<li>优：指令执行不用访问主存，执行速度最快</li>
<li>缺：位数限制数据的范围</li>
</ul>
<h4 id="3、直接寻址"><a href="#3、直接寻址" class="headerlink" title="3、直接寻址"></a>3、直接寻址</h4><p><img src="https://raw.githubusercontent.com/drinkwateronly/Image-Host/main/image/image-20231103092603583.png" alt="image-20231103092603583"></p>
<p>指令字的地址字段（形式地址A）就是操作数的真实地址EA，即EA &#x3D; A。</p>
<ul>
<li>优：简单，只访问一次主存，</li>
<li>缺：位数限制寻址范围，操作数地址不易修改？</li>
</ul>
<h4 id="4、间接寻址"><a href="#4、间接寻址" class="headerlink" title="4、间接寻址"></a>4、间接寻址</h4><p><img src="https://raw.githubusercontent.com/drinkwateronly/Image-Host/main/image/image-20231103093243805.png" alt="image-20231103093243805"></p>
<p>指令字的地址字段（形式地址A）就是操作数<strong>的地址的地址</strong>，，即EA &#x3D; (A)。</p>
<ul>
<li>可以<strong>扩大寻址范围</strong>，因为EA大于A；便于编制程序（方便完成子程序返回）</li>
<li>一次执行指令可能需要多次访存，慢，不常用。</li>
</ul>
<h4 id="5、寄存器寻址"><a href="#5、寄存器寻址" class="headerlink" title="5、寄存器寻址"></a>5、寄存器寻址</h4><p>指令字的地址字段 是 操作数所在的寄存器编号，即EA &#x3D; R</p>
<ul>
<li>优：指令字短，不访问主存，快；支持向量&#x2F;矩阵运算。</li>
<li>缺：寄存器贵，且数量有限。</li>
</ul>
<h4 id="6、寄存器间接寻址"><a href="#6、寄存器间接寻址" class="headerlink" title="6、寄存器间接寻址"></a>6、寄存器间接寻址</h4><p><img src="https://raw.githubusercontent.com/drinkwateronly/Image-Host/main/image/image-20231103094000331.png" alt="image-20231103094000331"></p>
<p>指令字的地址字段是 操作数的内存地址所在的寄存器编号，即EA &#x3D; (R)。类似间接寻址，</p>
<ul>
<li>比一次间接寻址快，因为只访问一次主存。</li>
</ul>
<h4 id="7、相对寻址"><a href="#7、相对寻址" class="headerlink" title="7、相对寻址"></a>7、相对寻址</h4><p><img src="https://raw.githubusercontent.com/drinkwateronly/Image-Host/main/image/image-20231103094316188.png" alt="image-20231103094316188"></p>
<p>指令字的地址字段是一个相对地址，操作数就存在相对于PC所指地址的相对地址上。即EA &#x3D; (PC) + A。</p>
<blockquote>
<p>CPU取出指令的一个字节后，自动执行(PC) + 1 -&gt; PC。</p>
<p>若JMP A的指令的地址为X，且占2B，那么取出该地址后PC &#x3D; X+2；执行这条指令后，自动跳转到 X+2+A的相对地址执行。</p>
</blockquote>
<ul>
<li>指令和数据相差一个固定值，便于程序浮动。</li>
<li>A的位数决定寻址范围。</li>
</ul>
<h4 id="8、基址寻址"><a href="#8、基址寻址" class="headerlink" title="8、基址寻址"></a>8、基址寻址</h4><p><img src="https://raw.githubusercontent.com/drinkwateronly/Image-Host/main/image/image-20231103095829138.png" alt="image-20231103095829138"></p>
<p><code>CPU中基址寄存器BR的内容  + 指令字地址字段的形式地址A = 操作数有效地址</code>。即<code>EA = (BR) + A</code>。</p>
<p>面向操作系统：</p>
<ul>
<li><p>用户可以决定是哪个寄存器作为BR，如专用寄存器、通用寄存器。</p>
</li>
<li><p>BR的内容由操作系统决定，所以用户无需关心程序在主存的哪个位置。</p>
</li>
<li><p>程序运行时，BR内容作为基地址不变，A作为偏移地址可改变。</p>
</li>
<li><p>优点：可扩大寻址范围，BR位数&gt;A位数；有利于多道程序设计，编制浮动程序，解决了程序逻辑地址与存储器物理地址的无关性。</p>
</li>
<li><p>缺点：偏移量仍然较短。</p>
</li>
</ul>
<h4 id="9、变址寻址"><a href="#9、变址寻址" class="headerlink" title="9、变址寻址"></a>9、变址寻址</h4><p><code>变址寄存器IX内容 + 指令字地址字段的形式地址A = 操作数有效地址</code>。即<code>EA = (IX) + A</code></p>
<p><img src="https://raw.githubusercontent.com/drinkwateronly/Image-Host/main/image/image-20231103100244722.png" alt="image-20231103100244722"></p>
<p>面向用户：</p>
<ul>
<li><p>用户可以决定是哪个寄存器作为IX，如专用寄存器、通用寄存器。</p>
</li>
<li><p>IX内容由用户设定</p>
</li>
<li><p>程序运行时，IX内容可以被改变，<strong>但形式地址A作为基地址不变</strong>。</p>
</li>
<li><p>优点：扩大寻址范围，IX位数&gt;A位数，IX位数足以表示整个存储空间。</p>
</li>
<li><p>适合编制循环程序；解决数组问题：设定A固定，不断改变IX，很容易形成数组任意数据的位置</p>
</li>
</ul>
<h4 id="10、堆栈寻址"><a href="#10、堆栈寻址" class="headerlink" title="10、堆栈寻址"></a>10、堆栈寻址</h4><p>存储器或专用寄存器组的LIFO存储区。读这个堆栈的地址由堆栈指针寄存器SP指出。</p>
<ul>
<li>硬堆栈：寄存器构成，成本高，容量小</li>
<li>软堆栈：主存划分的区域，常用</li>
</ul>
<p>采用堆栈结构的系统，大多数指令都是无操作数，隐含使用SP。</p>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><blockquote>
<ul>
<li><p>基址寻址搭配变址寻址:EA&#x3D;A+(BR)+(IX)既能保证程序浮动，程序内又能实现循环。</p>
</li>
<li><p>变址寻址搭配间址寻址：</p>
<ul>
<li>先变址后间址：EA&#x3D;(A+(IX))</li>
<li>先间址后变址：EA&#x3D;(A)+(IX)</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="4-4-CISC-RISC"><a href="#4-4-CISC-RISC" class="headerlink" title="4.4 CISC &amp; RISC"></a>4.4 CISC &amp; RISC</h2><p>复杂&#x2F;精简指令集系统计算机</p>
<p><img src="https://raw.githubusercontent.com/drinkwateronly/Image-Host/main/image/image-20231103102625534.png" alt="image-20231103102625534"></p>
<p><img src="https://raw.githubusercontent.com/drinkwateronly/Image-Host/main/image/image-20231103102639847.png" alt="image-20231103102639847"></p>
]]></content>
      <tags>
        <tag>408</tag>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
</search>
